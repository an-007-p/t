import sys
print("Python version:", sys.version)
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from datetime import time

CHAT_ID = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id
    await update.message.reply_text("–í–∫–ª—é—á–∞—é –Ω–∞–ø–æ–º–∏–Ω–Ω–∏—è –Ω–∞ 9:00 –∏ 21:00")

async def send_morning_reminder(context):
    if CHAT_ID:
        await context.bot.send_message(chat_id=CHAT_ID, text="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?")
async def test_morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç: –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ!")

async def send_evening_reminder(context):
    if CHAT_ID:
        await context.bot.send_message(chat_id=CHAT_ID, text="–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô –ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?")

# –≠—Ç–∞–ø—ã
MORNING_1, MORNING_2, MORNING_3, MORNING_4, MORNING_5 = range(5)
EVENING_Q1, EVENING_Q2, EVENING_Q3, EVENING_Q4, EVENING_Q5, EVENING_Q6 = range(10, 16)

# –õ–æ–≥
logging.basicConfig(level=logging.INFO)

# START
async def start2 (update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–µ–Ω—å üåû /morning ‚Äî —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω, üåô /evening ‚Äî –≤–µ—á–µ—Ä–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è."
    )

# –£–¢–†–û
async def morning_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–ø–∏—Å—å\n\n1. –ö–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é —Å–µ–π—á–∞—Å?")
    return MORNING_1

async def morning_q1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["morning_q1"] = update.message.text
    await update.message.reply_text("2. –ß—Ç–æ –¥–ª—è –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –≥–ª–∞–≤–Ω–æ–µ?")
    return MORNING_2

async def morning_q2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["morning_q2"] = update.message.text
    await update.message.reply_text("3. –ö–∞–∫–∏–µ —Ç—Ä–∏ –≤–µ—â–∏ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –¥–µ—Ä–∂–∞—Ç—å —Ñ–æ–∫—É—Å —Å–µ–≥–æ–¥–Ω—è?")
    return MORNING_3

async def morning_q3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["morning_q3"] = update.message.text
    await update.message.reply_text("4. –ß—Ç–æ —è —Ö–æ—á—É –∏–∑–±–µ–∂–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?")
    return MORNING_4

async def morning_q4(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["morning_q4"] = update.message.text
    await update.message.reply_text("5. –ß—Ç–æ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è?")
    return MORNING_5

async def morning_q5(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["morning_q5"] = update.message.text

    summary = (
        "üåÖ *–¢–≤–æ—è —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–ø–∏—Å—å:*\n\n"
        f"1. üßò –ö–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é: {context.user_data['morning_q1']}\n"
        f"2. üéØ –ì–ª–∞–≤–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è: {context.user_data['morning_q2']}\n"
        f"3. üéß –ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–µ—Ä–∂–∞—Ç—å —Ñ–æ–∫—É—Å: {context.user_data['morning_q3']}\n"
        f"4. ‚ùå –ß–µ–≥–æ —Ö–æ—á—É –∏–∑–±–µ–∂–∞—Ç—å: {context.user_data['morning_q4']}\n"
        f"5. üíù –ß—Ç–æ —Å–¥–µ–ª–∞—é –¥–ª—è —Å–µ–±—è: {context.user_data['morning_q5']}"
    )

    await update.message.reply_text(summary, parse_mode="Markdown")
    return ConversationHandler.END

# –í–ï–ß–ï–†
async def evening(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üßæ –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª–∞‚Ä¶")
    return EVENING_Q1

async def evening_q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["evening_q1"] = update.message.text
    await update.message.reply_text("ü´Ç –ö–∞–∫ —Ç—ã –∫ —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–Ω–µ—Å–ª–∞—Å—å?")
    return EVENING_Q2

async def evening_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["evening_q2"] = update.message.text
    await update.message.reply_text("‚ú® –ß–µ–º —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≥–æ—Ä–¥–∏—à—å—Å—è?")
    return EVENING_Q3

async def evening_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["evening_q3"] = update.message.text
    await update.message.reply_text("üôè –ó–∞ —á—Ç–æ —Ç—ã —Å–µ–±–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞?")
    return EVENING_Q4

async def evening_q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["evening_q4"] = update.message.text
    await update.message.reply_text("üß™ –ß—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∞ —á—Ç–æ ‚Äî –Ω–µ—Ç?")
    return EVENING_Q5

async def evening_q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["evening_q5"] = update.message.text
    await update.message.reply_text("üí§ –ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–≤—Ç—Ä–∞?")
    return EVENING_Q6

async def evening_q6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["evening_q6"] = update.message.text

    summary = (
        "üåô *–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç:*\n\n"
        f"1. üßæ –°–µ–≥–æ–¥–Ω—è —è —Å–¥–µ–ª–∞–ª–∞: {context.user_data['evening_q1']}\n"
        f"2. ü´Ç –ö–∞–∫ —è –∫ —Å–µ–±–µ –æ—Ç–Ω–µ—Å–ª–∞—Å—å: {context.user_data['evening_q2']}\n"
f"3. ‚ú® –ß–µ–º —è –≥–æ—Ä–∂—É—Å—å: {context.user_data['evening_q3']}\n"
        f"4. üôè –ó–∞ —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞: {context.user_data['evening_q4']}\n"
        f"5. üß™ –ß—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ / –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: {context.user_data['evening_q5']}\n"
        f"6. üí§ –ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞–≤—Ç—Ä–∞: {context.user_data['evening_q6']}"
    )

    await update.message.reply_text(summary, parse_mode="Markdown")
    return ConversationHandler.END

# –û–¢–ú–ï–ù–ê
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ üåø")
    return ConversationHandler.END

# –ó–ê–ü–£–°–ö
if __name__ == "__main__":
    TOKEN = "7830180476:AAFSiLdlVSv72ApNxzp8m7gJd09a7g3_jd4"
    app = ApplicationBuilder().token(TOKEN).build()

    morning_conv = ConversationHandler(
        entry_points=[CommandHandler("morning", morning_start)],
        states={
            MORNING_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, morning_q1)],
            MORNING_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, morning_q2)],
            MORNING_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, morning_q3)],
            MORNING_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, morning_q4)],
            MORNING_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, morning_q5)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    evening_conv = ConversationHandler(
        entry_points=[CommandHandler("evening", evening)],
        states={
            EVENING_Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, evening_q1)],
            EVENING_Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, evening_q2)],
            EVENING_Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, evening_q3)],
            EVENING_Q4: [MessageHandler(filters.TEXT & ~filters.COMMAND, evening_q4)],
            EVENING_Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, evening_q5)],
            EVENING_Q6: [MessageHandler(filters.TEXT & ~filters.COMMAND, evening_q6)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("start2", start2))
    app.add_handler(CommandHandler("test_morning", test_morning))
    app.add_handler(morning_conv)
    app.add_handler(evening_conv)
    
    job_queue = app.job_queue
    job_queue.run_daily(send_morning_reminder, time(hour=9, minute=0))
    job_queue.run_daily(send_evening_reminder, time(hour=21, minute=0))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
